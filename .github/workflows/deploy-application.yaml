name: Deploy Application

on:
  workflow_call:
    inputs:
      application:
        description: The name of the application to be deployed.
        type: string
        required: true
      image:
        description: The image being deployed.
        type: string
        required: true
      tag:
        description: The image tag being deployed.
        type: string
        required: true
    secrets:
      app-id:
        description: Github App ID.
        required: true
      app-secret:
        description: Github App private key.
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install @octokit/request @octokit/rest @octokit/auth-app

      - name: Fetch app details
        uses: actions/github-script@v6
        id: app-details
        env:
          APP_ID: ${{ secrets.app-id }}
          APP_SECRET: ${{ secrets.app-secret }}
        with:
          script: |
            const { Octokit } = require('@octokit/rest')
            const { createAppAuth } = require('@octokit/auth-app')
            const { request } = require('@octokit/request')

            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_SECRET,
              },
              request: { fetch },
            })

            const { data: { id: installationId } } = await appOctokit.rest.apps.getRepoInstallation({
              owner: 'nevivurn',
              repo: 'cd-test-config',
            })

            const octokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_SECRET,
                installationId,
              },
              request: { fetch },
            })
            const { data: { slug: appSlug } } = await octokit.rest.apps.getAuthenticated()
            const { data: { id: appUserId } } = await octokit.rest.users.getByUsername({
              username: `${appSlug}[bot]`,
            })

            const { token } = await createAppAuth({
              appId: process.env.APP_ID,
              privateKey: process.env.APP_SECRET,
              installationId,
              request: request.defaults({
                request: { fetch },
              })
            })({ type: "installation" })

            return {
              token,
              appSlug,
              appUserId
            }

      - uses: actions/checkout@v3
        with:
          repository: nevivurn/cd-test-config
          ref: master
          token: ${{ fromJSON(steps.app-details.outputs.result).token }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r scripts/requirements.txt

      - name: Patch manifests
        run: ./scripts/patch_application.py "$APPLICATION" "$IMAGE" "$TAG"
        env:
          APPLICATION: ${{ inputs.application }}
          IMAGE: ${{ inputs.image }}
          TAG: ${{ inputs.tag }}
      - run: git diff

      - name: Commit and push changes
        run: |
          git commit \
            -am "Deploy $FROM_REPO ($FROM_REF)" \
            -m "$FROM_WORKFLOW triggered from $FROM_REPO@$FROM_SHA"
          git push
        env:
          GIT_COMMITTER_NAME: ${{ fromJSON(steps.app-details.outputs.result).appSlug }}[bot]
          GIT_COMMITTER_EMAIL: ${{ fromJSON(steps.app-details.outputs.result).appUserId }}+${{ fromJSON(steps.app-details.outputs.result).appSlug }}[bot]@users.noreply.github.com
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          FROM_REPO: ${{ github.repository }}
          FROM_SHA: ${{ github.sha }}
          FROM_REF: ${{ github.ref_name }}
          FROM_WORKFLOW: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
